package View.GUI;import Controller.Controller;import Model.Projects.Project;import Model.Projects.ProjectItem;import Model.Projects.Publications.Publication;import javafx.scene.control.*;import javafx.scene.layout.HBox;import javafx.scene.layout.Pane;import javafx.scene.layout.VBox;import javafx.stage.DirectoryChooser;import javafx.stage.Stage;import java.io.File;import java.util.List;import java.util.Map;import java.util.stream.Collectors;public class PublicationTree{    Controller controller;    Stage stage;    Menu menu; Tree tree; MenuOnClick menuOnClick;    public PublicationTree(Controller controller, Stage stage) {        this.controller = controller;        this.stage = stage;        menu = new Menu();        tree = new Tree();        menuOnClick = new MenuOnClick();    }    class Menu{        Button addProject = new Button("Add project");        Button remProject = new Button("Remove project");        Project selected;        HBox create(){            addProject.setOnAction(evt -> {                controller.addProject(chooseDir());            });            remProject.setOnAction(evt -> {                controller.remProject(selected);                selected = null;            });            remProject.setDisable(true);            return new HBox(addProject, remProject);        }    }    class Tree{        TreeView<ProjectItem> pubTreeView;        void create(List<Project> projects){            TreeItem<ProjectItem> root = createRoot(projects);            TreeView<ProjectItem> pubTreeView = new TreeView<>(root);            pubTreeView.setShowRoot(false);            pubTreeView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {                if (newValue == null) {                    menu.remProject.setDisable(true);                    menuOnClick.remPub.setDisable(false);                } else if (newValue.getValue() instanceof Project) {                    menu.remProject.setDisable(false);                    menu.selected = (Project) newValue.getValue();                    menuOnClick.remPub.setDisable(true);                    menuOnClick.addPub.setDisable(false);                    menuOnClick.selProject = (Project) newValue.getValue();                } else {                    menu.remProject.setDisable(true);                    menuOnClick.addPub.setDisable(true);                    menuOnClick.remPub.setDisable(false);                    menuOnClick.selPub = (Publication) newValue.getValue();                    menuOnClick.selProject = (Project) newValue.getParent().getValue();                }            });            pubTreeView.setContextMenu(menuOnClick.create());            menuOnClick.remPub.setDisable(true);            menuOnClick.addPub.setDisable(true);            this.pubTreeView = pubTreeView;        }        void update(List<Project> projects){            TreeItem<ProjectItem> root = pubTreeView.getRoot();            Map<Project,Boolean> expanded = root.getChildren()                    .stream()                    .collect(Collectors.toMap(                            p -> (Project) p.getValue(),                            TreeItem::isExpanded));            root = createRoot(projects);            Map<Project,TreeItem<ProjectItem>> newTreeItems = root.getChildren()                    .stream()                    .collect(Collectors.toMap(                            p -> (Project) p.getValue(),                            p -> p));            for (Project p : newTreeItems.keySet()){                if (expanded.get(p) != null){                    newTreeItems.get(p).setExpanded(expanded.get(p));                }            }            pubTreeView.setRoot(root);        }        private TreeItem<ProjectItem> createRoot(List<Project> projects) {            List<TreeItem<ProjectItem>> pubTree = projects.stream()                    .map(p -> {                        TreeItem<ProjectItem> treeItem = new TreeItem<>(p);                        treeItem.getChildren().addAll(                                p.getPublications()                                        .stream()                                        .map(TreeItem<ProjectItem>::new)                                        .collect(Collectors.toList()));                        return treeItem;})                    .collect(Collectors.toList());            TreeItem<ProjectItem> root = new TreeItem<>();            root.getChildren().addAll(pubTree);            return root;        }    }    class MenuOnClick{        MenuItem addPub = new MenuItem("Add publication");        MenuItem remPub = new MenuItem("Remove publication");        Project selProject;        Publication selPub;        ContextMenu create(){            ContextMenu contextMenu = new ContextMenu();            addPub.setOnAction(evt -> controller.addPub(selProject, chooseDir()));            remPub.setOnAction(evt -> controller.remPub(selProject, selPub));            contextMenu.getItems().addAll(addPub, remPub);            return contextMenu;        }    }    public Pane create(List<Project> projects){        tree.create(projects);        return new VBox(tree.pubTreeView, menu.create());    }    public void update(List<Project> projects){        tree.update(projects);    }    private String chooseDir(){        DirectoryChooser dirChooser = new DirectoryChooser();        File dir = dirChooser.showDialog(stage);        return dir.getName();    }}