package View.GUI;import Controller.Controller;import Model.Projects.Project;import Model.Projects.ProjectItem;import javafx.scene.control.*;import javafx.scene.layout.HBox;import javafx.scene.layout.Pane;import javafx.scene.layout.VBox;import javafx.stage.DirectoryChooser;import javafx.stage.Stage;import java.io.File;import java.util.List;import java.util.stream.Collectors;public class PublicationTree{    Controller controller;    Stage stage;    Menu menu; Tree tree; MenuOnClick menuOnClick;    public PublicationTree(Controller controller, Stage stage) {        this.controller = controller;        this.stage = stage;        menu = new Menu();        tree = new Tree();        menuOnClick = new MenuOnClick();    }    class Menu{        Button addProject = new Button("Add project");        Button remProject = new Button("Remove project");        Project selected;        HBox create(){            addProject.setOnAction(evt -> {                controller.addProject(chooseDir());            });            remProject.setOnAction(evt -> {                controller.remProject(selected);                selected = null;            });            remProject.setDisable(true);            return new HBox(addProject, remProject);        }    }    class Tree{        TreeView<ProjectItem> create(List<Project> projects){            List<TreeItem<ProjectItem>> pubTree = projects.stream()                    .map(p -> {                        TreeItem<ProjectItem> treeItem = new TreeItem<>(p);                        treeItem.getChildren().addAll(                                p.getPublications()                                        .stream()                                        .map(TreeItem<ProjectItem>::new)                                        .collect(Collectors.toList()));                        return treeItem;})                    .collect(Collectors.toList());            TreeItem<ProjectItem> root = new TreeItem<>();            root.getChildren().addAll(pubTree);            TreeView<ProjectItem> pubTreeView = new TreeView<>(root);            pubTreeView.setShowRoot(false);            pubTreeView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {                if (newValue.getValue() instanceof Project) {                    menu.remProject.setDisable(false);                    menu.selected = (Project) newValue.getValue();                    menuOnClick.remPub.setDisable(true);                    menuOnClick.selected = (Project) newValue.getValue();                } else {                    menu.remProject.setDisable(true);                    menuOnClick.remPub.setDisable(false);                }            });            pubTreeView.setContextMenu(menuOnClick.create());            return pubTreeView;        }    }    class MenuOnClick{        MenuItem addPub = new MenuItem("Add publication");        MenuItem remPub = new MenuItem("Remove publication");        Project selected;        ContextMenu create(){            ContextMenu contextMenu = new ContextMenu();            addPub.setOnAction(evt -> controller.addPub(selected, chooseDir()));            contextMenu.getItems().addAll(addPub, remPub);            return contextMenu;        }    }    public Pane create(List<Project> projects){        return new VBox(tree.create(projects), menu.create());    }    private String chooseDir(){        DirectoryChooser dirChooser = new DirectoryChooser();        File dir = dirChooser.showDialog(stage);        return dir.getName();    }}