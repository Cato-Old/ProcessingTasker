package Model.Tasks;import Model.Projects.Publications.Publication;import View.View;import javafx.application.Platform;import javafx.concurrent.Task;import java.io.BufferedReader;import java.io.InputStreamReader;import java.nio.file.Path;public class ProcessTask implements Cloneable {    String label;    Path scriptPath;    Publication publication;    public ProcessTask(String label, Path scriptPath){        this.label = label;        this.scriptPath = scriptPath;    }    public String getLabel(){        return label;    }    public Task task(){        return new Task() {            @Override            protected Object call() throws Exception {                String line;                Runtime rt = Runtime.getRuntime();                Process proc = rt.exec("python " + scriptPath.toString());                try (BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()))) {                    while((line = reader.readLine()) != null){                        final String ln = "\n" + line;                        Platform.runLater(()-> {                            View.logView.appendText(ln);                        });                    }                } catch (Exception e){e.printStackTrace();}                return null;            }        };    }    public ProcessTask setPublication(Publication publication){        ProcessTask newProcessTask = new ProcessTask(this.label, this.scriptPath);        newProcessTask.publication = publication;        return newProcessTask;    }    public Publication getPublication(){        return publication;    }    public Task getTask() {        Task task = task();        Thread th = new Thread(task);        th.setDaemon(true);        return task;    }}